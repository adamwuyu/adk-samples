---
description: ADK 开发 关键点检查清单
globs: 
alwaysApply: false
---
# ADK 开发 关键点检查清单

本文档总结了基于 ADK (Agent Development Kit) 进行 Agent 开发时，关于 Session State 使用和核心组件分工的关键检查点，旨在确保开发实践符合 ADK 的设计规范和最佳实践。

## Session State 相关检查点

| 检查点 (KP) | 描述                                                                                                                                                                                                                                                                                                                | 验证与最佳实践                                                                                                                                                                                                                                                                                                                                                                                                                                                             |
| :---------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **KP1**     | **状态初始化:** 会话状态 (Session State) 的初始值应在创建会话时通过 `SessionService.create_session(..., state=initial_state)` 提供，用于注入如用户配置、任务参数等启动信息。                                                                                                                                        | ✅ **已验证:** 这是 ADK 教程和示例代码（尤其在测试和评估场景）中设置初始上下文的标准方式。                                                                                                                                                                                                                                                                                                                                                                                |
| **KP2**     | **工具访问状态:** 工具 (Tools) 是访问和修改 **运行时** 会话状态的主要和推荐途径。通过在其函数签名中包含 `tool_context: ToolContext` 参数（由 Runner 自动注入），工具内部可以使用 `tool_context.state.get/set` 安全地与状态交互。                                                                                             | ✅ **已验证:** ADK 教程明确演示此模式，且在各种复杂示例 Agent（如涉及状态维护的任务）中普遍采用。这是封装状态相关逻辑的标准做法。                                                                                                                                                                                                                                                                                                                               |
| **KP3**     | **回调访问状态:** 回调函数 (Callbacks, 如 `before_model_callback`, `before_tool_callback`) 可以通过其上下文参数 (`callback_context.state`) 访问和修改状态。这主要用于在 Agent 生命周期的特定检查点实施 Guardrails、策略检查或进行动态调整。                                                                              | ✅ **已验证:** ADK 教程中的安全 Guardrail 示例清晰展示了 Callback 对状态的访问。在示例 Agent 中，Callbacks 也常用于需要状态感知的检查或设置。                                                                                                                                                                                                                                                                                                                          |
| **KP4**     | **LLM 状态感知 vs. 访问:** Agent 的指令 (Instructions) 应假设 LLM 能从 Runner 提供的上下文中 *感知* 状态信息的存在和意义，并据此做出推理（例如，决定调用哪个工具）。但指令 **不应** 包含要求 LLM 生成字面上的状态访问代码（如 `session_state.get('key')`）的指令。LLM 的职责是决策（调用哪个 Tool），而不是实现状态访问的技术细节。 | ✅ **已验证:** 教程和示例的 Agent 指令专注于目标、工具选择和结果处理，避免直接命令 LLM 操作状态。让 LLM 感知状态存在，但将具体访问逻辑封装在 Tool 或 Callback 中是更健壮、更符合 ADK 设计的模式。之前的失败尝试也证明了直接命令 LLM 访问状态的不可靠性。                                                                                                                                       |

## 核心组件分工相关检查点

| 检查点 (KP) | 描述                                                                                                                                                                                                      | 验证与最佳实践                                                                                                                                                                                                                                                                                                                                                         |
| :---------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **KP5**     | **入口点职责:** 应用入口点（如主脚本、测试函数、部署服务）的核心职责是**初始化** ADK 核心组件 (`Runner`, `SessionService`)，准备初始输入（消息和/或状态），并调用 `runner.run_async()` 来**启动** Agent 交互流程。                                  | ✅ **已验证:** 这是所有教程示例和项目示例中启动 ADK 应用的标准流程起点。入口点是 ADK 框架的"客户端"。                                                                                                                                                                                                                                                              |
| **KP6**     | **Runner 职责:** `Runner` 是 ADK 的**核心协调器**。它管理 Agent 的完整执行生命周期，包括：与 `SessionService` 交互管理状态和历史；准备并向 Agent (LLM) 发送上下文；解析 Agent 响应；在正确时机调用 Tools 和 Callbacks；处理 Tool/Callback 结果；更新状态；最终将事件流或结果返回给入口点。 | ✅ **已验证:** Runner 在所有 ADK 应用中扮演着至关重要的"引擎"角色，连接并驱动其他所有组件按预期工作。                                                                                                                                                                                                                                                                 |
| **KP7**     | **Agent 职责:** `Agent` 实例主要负责**配置**。它通过 `model` 和 `instruction` 定义其**推理核心**，并通过 `tools`, `sub_agents`, `callbacks` 等参数声明其可用的**能力边界**和**行为约束**。Agent 的核心任务是基于 Runner 提供的上下文进行推理并产生决策（下一步做什么）。                | ✅ **已验证:** 教程和所有示例 Agent 都围绕着 `Agent(...)` 的配置展开，明确定义了模型的选择、行为指令以及可调用的外部能力。                                                                                                                                                                                                                                       |
| **KP8**     | **Tool 职责:** Tools 负责**封装具体的、可执行的动作**。这包括与外部系统（API、数据库等）的交互，执行计算，或者如 KP2 所述，**通过 `ToolContext` 与 Session State 进行交互**。Tool 应设计为可复用的能力单元，其文档字符串 (docstring) 对于 Agent (LLM) 理解其功能至关重要。           | ✅ **已验证:** 这是 ADK 设计的基础。所有示例都使用 Tools 来实现 Agent 的具体行动能力。将状态访问逻辑封装在 Tool 中（当动作需要访问状态时）是实现关注点分离和代码模块化的关键。                                                                                                                                                                                 |

通过遵循这些检查点，可以提高 ADK 应用开发的规范性、健壮性和可维护性。 